version: 2.1

commands:
  set-env:
    description:
    steps:
      - run:
          name: "Set environment variables."
          command: |
            echo 'export YT_DIR=$HOME/yt-git' >> $BASH_ENV
            echo 'TRIDENT_ION_DATA=$HOME/.trident' >> $BASH_ENV
            echo 'TRIDENT_ANSWER_DATA=$HOME/answer_test_data' >> $BASH_ENV
            echo 'TRIDENT_CONFIG=$HOME/.trident/config.tri' >> $BASH_ENV
            echo 'YT_GOLD=d218647162201673e8d0bc513a16b1b3add02a47' >> $BASH_ENV
            echo 'YT_HEAD=master' >> $BASH_ENV
            echo 'TRIDENT_GOLD=test-standard-v7' >> $BASH_ENV
            echo 'TRIDENT_HEAD=tip' >> $BASH_ENV

  install-dependencies:
    description: "Install dependencies."
    parameters:
      yttag:
        type: string
        default: YT_GOLD
    steps:
      - run:
          name: "Install dependencies."
          no_output_timeout: 20m
          command: |
            # add git user info so we can commit
            git config --global user.email "fake@nothing.nothing"
            git config --global user.name "C.I. Circle"
            # tag the tip so we can get back to it
            git tag tip
            sudo apt-get update
            sudo apt-get install -y texlive-latex-extra dvipng
            if [ ! -d $HOME/venv ]; then
                python3 -m venv $HOME/venv
            fi
            source $BASH_ENV
            source $HOME/venv/bin/activate
            pip install --upgrade pip
            pip install --upgrade wheel
            pip install --upgrade setuptools
            pip install Cython numpy
            export MAX_BUILD_CORES=2
            if [ << parameters.yttag >> != "None" ]; then
                if [ ! -f $YT_DIR/README.md ]; then
                    git clone --branch=${YT_HEAD} https://github.com/yt-project/yt $YT_DIR
                fi
                pushd $YT_DIR
                # return to yt tip before pulling
                git checkout ${YT_HEAD}
                git pull origin ${YT_HEAD}
                # checkout changeset we're actually testing
                git checkout ${<< parameters.yttag >>}
                pip install -e .
                popd
            fi
            pip install -e .[dev]

  install-trident:
    description: "Install trident."
    parameters:
      tridenttag:
        type: string
        default: TRIDENT_HEAD
    steps:
      - run:
          name: "Install trident."
          command: |
            source $BASH_ENV
            source $HOME/venv/bin/activate
            git checkout ${<< parameters.tridenttag >>} || git checkout $TRIDENT_HEAD
            pip install -e .[dev]

  configure-trident:
    description: "Configure trident."
    steps:
      - run:
          name: "Configure trident."
          command: |
            source $BASH_ENV
            # configure trident
            mkdir -p $TRIDENT_ION_DATA
            echo "[Trident]" > $TRIDENT_CONFIG
            echo "ion_table_dir = $TRIDENT_ION_DATA" >> $TRIDENT_CONFIG
            echo "ion_table_file = hm2012_lr.h5" >> $TRIDENT_CONFIG
            echo "answer_test_data_dir = $TRIDENT_ANSWER_DATA" >> $TRIDENT_CONFIG

  download-test-data:
    description: "Download test data."
    steps:
      - run:
          name: "Download test data."
          command: |
            source $BASH_ENV
            source $HOME/venv/bin/activate
            # download ion balance data
            if [ ! -f $TRIDENT_ION_DATA/hm2012_lr.h5 ]; then
               wget http://trident-project.org/data/ion_table/hm2012_lr.h5.gz
               gunzip hm2012_lr.h5.gz
               mv hm2012_lr.h5 $TRIDENT_ION_DATA
            fi
            # download answer test data
            if [ ! -f $TRIDENT_ANSWER_DATA/enzo_small/AMRCosmology.enzo ]; then
               pushd tests
               export RUN_DOWNLOAD_TEST=1
               pytest test_download.py
               popd
            fi

  lint:
    description: "Lint."
    steps:
      - run:
          name: "Lint."
          command: |
            source $BASH_ENV
            source $HOME/venv/bin/activate
            flake8 trident

  run-tests:
    description: "Build trident and run tests."
    parameters:
      coverage:
        type: integer
        default: 0
      generate:
        type: integer
        default: 0

    steps:
      - run:
          name: "Build trident and run tests."
          command: |
            source $BASH_ENV
            source $HOME/venv/bin/activate
            export TRIDENT_GENERATE_TEST_RESULTS=<< parameters.generate >>
            if [[ << parameters.generate >> == 0 || ! -f $TRIDENT_ANSWER_DATA/test_results/TRIDENT_VERSION ]]; then
                pushd tests
                pytest --cov=trident
            fi
            if [ << parameters.coverage >> == 1 ]; then
                # code coverage report
                export COVERALLS_REPO_TOKEN="yUoFnf5H5uC9MJ9kLqzKaoSxkPf5dHc7F"
                coveralls
            fi

  build-docs:
    description: "Test the docs build."
    steps:
      - run:
          name: "Test the docs build."
          command: |
            source $BASH_ENV
            source $HOME/venv/bin/activate
            touch $HOME/.trident/hm2012_lr.h5
            cd doc/source
            python -m sphinx -M html "." "_build" -W

executors:
  python:
    parameters:
      tag:
        type: string
        default: latest
    docker:
      - image: circleci/python:<< parameters.tag >>

jobs:
  tests:
    parameters:
      tag:
        type: string
        default: latest
      coverage:
        type: integer
        default: 0
      yttag:
        type: string
        default: YT_GOLD
    executor:
      name: python
      tag: << parameters.tag >>

    working_directory: ~/trident

    steps:
      - checkout
      - set-env

      - restore_cache:
          name: "Restore dependencies cache."
          key: python-<< parameters.tag >>-dependencies-v6

      - install-dependencies:
          yttag: << parameters.yttag >>

      - configure-trident

      - save_cache:
          name: "Save dependencies cache."
          key: python-<< parameters.tag >>-dependencies-v6
          paths:
            - ~/.cache/pip
            - ~/venv
            - ~/yt-git

      - lint

      - restore_cache:
          name: "Restore test data cache."
          key: test-data-v1

      - download-test-data

      - save_cache:
          name: "Save test data cache."
          key: test-data-v1
          paths:
            - ~/.trident
            - ~/answer_test_data

      - install-trident:
          tridenttag: "TRIDENT_GOLD"

      - restore_cache:
          name: "Restore answer tests cache."
          key: test-results-<< parameters.tag >>-<< parameters.yttag >>-v9

      - run-tests:
          generate: 1

      - save_cache:
          name: "Save answer tests cache."
          key: test-results-<< parameters.tag >>-<< parameters.yttag >>-v9
          paths:
            - ~/answer_test_data/test_results

      - install-trident:
          tridenttag: "TRIDENT_HEAD"

      - run-tests:
          coverage: << parameters.coverage >>
          generate: 0

  docs-test:
    parameters:
      tag:
        type: string
        default: latest
    executor:
      name: python
      tag: << parameters.tag >>

    working_directory: ~/trident

    steps:
      - checkout
      - set-env
      - install-dependencies:
          yttag: "None"
      - configure-trident
      - build-docs

workflows:
   version: 2

   normal-tests:
     jobs:
       - tests:
           name: "Python 3.6 tests with yt gold"
           tag: "3.6.11"

       - tests:
           name: "Python 3.7 tests with yt gold"
           tag: "3.7.8"

       - tests:
           name: "Python 3.8 tests with yt gold"
           tag: "3.8.5"

       - tests:
           name: "Python 3.8 tests with yt tip"
           tag: "3.8.5"
           yttag: "YT_HEAD"
           coverage: 1

       - docs-test:
           name: "Test docs build"
           tag: "3.8.5"

   daily:
     triggers:
       - schedule:
           cron: "0 0 * * *"
           filters:
            branches:
              only:
                - master
     jobs:
       - tests:
           name: "Python 3.8 tests with yt tip"
           tag: "3.8.5"
           yttag: "YT_HEAD"
           coverage: 0

       - docs-test:
           name: "Test docs build"
           tag: "3.8.5"
